@page "/water"
@using Newtonsoft.Json
@using NutritionFitnessJeremiah.Data

<h3>Drink Water</h3>
<p>You drank @prevAmountWater glass(es) of water, @prevAmountJuice glass(es) of juice and @prevAmountSoda glass(es) of soda yesterday.</p>
<button class="btn btn-info" @onclick="async () => await TakeWater(DrinkType.Water)">Drink 1 glass of water</button>
<button class="btn btn-info" @onclick="async () => await TakeWater(DrinkType.Juice)">Drink 1 glass of juice</button>
<button class="btn btn-info" @onclick="async () => await TakeWater(DrinkType.Soda)">Drink 1 glass of soda</button>

@code {
    private string filePath = "water_tracker.json";
    private string currentDate = DateTime.Now.ToString("yyyy-MM-dd");
    private string prevDate = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd");

    private int prevAmountWater = 0;
    private int prevAmountJuice = 0;
    private int prevAmountSoda = 0;

    private WaterTracker waterTracker;
    private bool flag = false;

    protected override void OnInitialized()
    {
        if (File.Exists(filePath))
        {
            // Read and deserialize the JSON file into the waterTracker object
            string json = File.ReadAllText(filePath);
            waterTracker = JsonConvert.DeserializeObject<WaterTracker>(json);

            // If the previous date exists, retrieve the values for water, juice, and soda
            if (waterTracker.WaterData.ContainsKey(prevDate))
            {
                var prevDayData = waterTracker.WaterData[prevDate];
                prevAmountWater = prevDayData.Water;
                prevAmountJuice = prevDayData.Juice;
                prevAmountSoda = prevDayData.Soda;
            }
        }
        else
        {
            // Initialize waterTracker if the file doesn't exist
            waterTracker = new WaterTracker();
        }
        flag = true;
    }


    private async Task TakeWater(DrinkType drinkType)
    {
        if (!waterTracker.WaterData.ContainsKey(currentDate))
        {
            waterTracker.WaterData[currentDate] = new DrinkIntake();
        }

        // Update the count based on the drink type
        switch (drinkType)
        {
            case DrinkType.Water:
                waterTracker.WaterData[currentDate].Water += 1;
                break;
            case DrinkType.Juice:
                waterTracker.WaterData[currentDate].Juice += 1;
                break;
            case DrinkType.Soda:
                waterTracker.WaterData[currentDate].Soda += 1;
                break;
        }

        // Save data back to the file
        string updatedJson = JsonConvert.SerializeObject(waterTracker.WaterData, Formatting.Indented);
        await File.WriteAllTextAsync(filePath, updatedJson);
    }

}
